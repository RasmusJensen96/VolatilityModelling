devtools::load_all(".")
source('~/OneDrive - Aarhus universitet/R/VolatilityModelling/Tests/Squared_Returns.R', echo=TRUE)
plot.ts(fit$Observations-fit$FilteredMean)
density(fit$Observations-fit$FilteredMean)
plott(density(fit$Observations-fit$FilteredMean))
plot(density(fit$Observations-fit$FilteredMean))
devtools::load_all(".")
MemFit = Estimate_MEM(VIX, Dates)
plot(MemFit)
MemFit$Name = "VIX"
plot(MemFit)
devtools::load_all(".")
MemFit = Estimate_MEM(VIX, Dates, 100)
MemFit$Name = "VIX"
plot(MemFit)
devtools::load_all(".")
nrow(DJI$DJI.Adjusted)
Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
devtools::load_all(".")
Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
plot(fitgarch)
devtools::load_all(".")
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
source('~/.active-rstudio-document', echo=TRUE)
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
devtools::load_all(".")
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
devtools::load_all(".")
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
devtools::load_all(".")
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
Dates = ""
devtools::load_all(".")
DJI = getSymbols("^DJI", auto.assign = FALSE, from = "2007-12-01", to = "2010-06-01")
rets = diff(log(DJI$DJI.Adjusted))*100
rets = as.vector(rets)[-1]
rets = rets^2
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
View(fitgarch)
fitgarch[["Filtered"]]
devtools::load_all(".")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
devtools::load_all(".")
library("quantmod")
##                                Dow Jones Industrial                            ##
####################################################################################
##                                  Retrieve returns                              ##
####################################################################################
DJI = getSymbols("^DJI", auto.assign = FALSE, from = "2007-12-01", to = "2010-06-01")
rets = diff(log(DJI$DJI.Adjusted))*100
rets = as.vector(rets)[-1]
Dates = index(DJI)[-1]
rets = rets^2
####################################################################################
##                                Estimate the model                              ##
####################################################################################
fit = Estimate_Gamma_GAS(rets,Dates, 100)
fit$Name  = "DJI"
plot(fit)
##                                        VIX                                     ##
####################################################################################
##                                  Retrieve returns                              ##
####################################################################################
VIX = getSymbols("^VIX", auto.assign = FALSE, from = "2007-12-01", to = "2012-06-01")
VIX = VIX$VIX.Adjusted
Dates = index(VIX)
VIX = as.numeric(VIX)
####################################################################################
##                                Estimate the model                              ##
####################################################################################
fit = Estimate_Gamma_GAS(VIX,Dates, 100)
DJI = getSymbols("^DJI", auto.assign = FALSE, from = "2007-12-01", to = "2010-06-01")
rets = diff(log(DJI$DJI.Adjusted))*100
rets = as.vector(rets)[-1]
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
DJI = getSymbols("^DJI", auto.assign = FALSE, from = "2007-12-01", to = "2010-06-01")
rets = diff(log(DJI$DJI.Adjusted))*100
rets = as.vector(rets)[-1]
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
plot(fitgarch)
DJI = getSymbols("^DJI", auto.assign = FALSE, from = "2007-12-01", to = "2010-06-01")
rets = diff(log(DJI$DJI.Adjusted))*100
rets = as.vector(rets)[-1]
rets = rets^2
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
rets = rets^(-.5)
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
DJI = getSymbols("^DJI", auto.assign = FALSE, from = "2007-12-01", to = "2010-06-01")
rets = diff(log(DJI$DJI.Adjusted))*100
rets = as.vector(rets)[-1]
rets = rets
fitgarch = Estimate_GARCH(rets, index(DJI$DJI.Adjusted)[-1])
fitgarch$Name = "DJI"
plot(fitgarch)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(VolatilityModelling)
devtools::load_all(".")
library(VolatilityModelling)
library(VolatilityModelling)
library(VolatilityModelling)
devtools::load_all(".")
library(VolatilityModelling)
devtools::load_all(".")
devtools::load_all(".")
iT = 500
dAlpha = 0.1
dBeta = 0.85
yt = GARCHGauss_Simulate(iT, dOmega, dAlpha, dbeta)
dOmega = 0.01
dAlpha = 0.1
dBeta = 0.85
yt = GARCHGauss_Simulate(iT, dOmega, dAlpha, dbeta)
iT = 500
dOmega = 0.01
dAlpha = 0.1
dBeta = 0.85
yt = GARCHGauss_Simulate(iT, dOmega, dAlpha, dbeta)
yt = GARCHGauss_Simulate(iT, dOmega, dAlpha, dBeta)
plot.ts(yt$vSigma2)
plot.ts(sqrt(yt$vSigma2))
plot.ts(sqrt(yt$vSigma2)
plot.ts(sqrt(yt$vSigma2)
plot.ts(sqrt(yt$vSigma2)
plot.ts(sqrt(yt$vSigma2))
plot.ts(yt$vSigma2)
plot.ts(yt$vSigma2)
plot.ts(sqrt(yt$vSigma2))
Estimate_GARCH(yt$vY, 1:iT)
fit = Estimate_GARCH(yt$vY, 1:iT)
iT = 500
dOmega = 0.01
dAlpha = 0.2
dBeta = 0.75
yt = GARCHGauss_Simulate(iT, dOmega, dAlpha, dBeta)
plot.ts(sqrt(yt$vSigma2))
fit = Estimate_GARCH(yt$vY, 1:iT)
plot(fit$Filtered^2)
plot.ts(sqrt(yt$vSigma2))
plot(fit$Filtered^2)
expression(alpha)
library(shiny); runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
1 != 0
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
plot(yt)
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
devtools::load_all(".")
source('~/OneDrive - Aarhus universitet/R/VolatilityModelling/R/GARCHGauss_Simulate.R', echo=TRUE)
library(VolatilityModelling)
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
runApp('~/OneDrive - Aarhus universitet/R/GH/GARCHtest.R')
library(VolatilityModelling)
getOption("repos")
packageDescription("VolatilityModelling")
remove.packages("VolatilityModelling")
install_github("RasmusJensen96/VolatilityModelling")
library(VolatilityModelling)
