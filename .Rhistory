optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 100
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.000001), UB = c(10.0, 0.999, 0.999, 10))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
Estimate_GARCH <- function(vY,Dates,dist) {
## Function fitting or estimatinig a GARCH(1,1)-model on a certain vector of data
## Input:  vY:      Data-vector
## output: vPar:    parameters resulting in the maximum likeliihood given data c(omega, alpha, beta)
##         dLLK:    Value of the likelihood at the Maximum likelihood given data and estimated parameters
##         BIC:     Average BIC value at the (numerical) maximum likelihood estimate
##         Filter: Vector of conditional volatility
# Initialize the values at some arbitrary values, except omega initialized at the unconditional value.
require(Rsolnp)
dAlpha = 0.05
dBeta  = 0.94
dOmega = var(vY) * (1.0 - dAlpha - dBeta)
vPar = c(dOmega, dAlpha, dBeta)
## Optimize using the non-linear solnp, allowing for inequality constraints such as the one contained in
## StationarityConstr ensuring htat the estimated model is covariance (weakly) stationary
if (dist == "Gaussian"){
optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 100
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.000001), UB = c(10.0, 0.999, 0.999, 1000))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
StationarityConstrT <- function(vPar, ...) {
## Auxiliary function used as a constraint in the solnp proc in estimate GARCH:
## The function is used to determine if a given combination of ARCH and GARCH parameters in a GARCH(1,1) equation
## Results in a stationary GARCH(1,1) model. That is alpha+beta < 1
dAlpha = vPar[2]
dBeta  = vPar[3]
return(dAlpha + dBeta)
}
Estimate_GARCH <- function(vY,Dates,dist) {
## Function fitting or estimatinig a GARCH(1,1)-model on a certain vector of data
## Input:  vY:      Data-vector
## output: vPar:    parameters resulting in the maximum likeliihood given data c(omega, alpha, beta)
##         dLLK:    Value of the likelihood at the Maximum likelihood given data and estimated parameters
##         BIC:     Average BIC value at the (numerical) maximum likelihood estimate
##         Filter: Vector of conditional volatility
# Initialize the values at some arbitrary values, except omega initialized at the unconditional value.
require(Rsolnp)
dAlpha = 0.05
dBeta  = 0.94
dOmega = var(vY) * (1.0 - dAlpha - dBeta)
vPar = c(dOmega, dAlpha, dBeta)
## Optimize using the non-linear solnp, allowing for inequality constraints such as the one contained in
## StationarityConstr ensuring htat the estimated model is covariance (weakly) stationary
if (dist == "Gaussian"){
optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 100
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.000001), UB = c(10.0, 0.999, 0.999, 1000))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
Estimate_GARCH <- function(vY,Dates,dist) {
## Function fitting or estimatinig a GARCH(1,1)-model on a certain vector of data
## Input:  vY:      Data-vector
## output: vPar:    parameters resulting in the maximum likeliihood given data c(omega, alpha, beta)
##         dLLK:    Value of the likelihood at the Maximum likelihood given data and estimated parameters
##         BIC:     Average BIC value at the (numerical) maximum likelihood estimate
##         Filter: Vector of conditional volatility
# Initialize the values at some arbitrary values, except omega initialized at the unconditional value.
require(Rsolnp)
dAlpha = 0.05
dBeta  = 0.94
dOmega = var(vY) * (1.0 - dAlpha - dBeta)
vPar = c(dOmega, dAlpha, dBeta)
## Optimize using the non-linear solnp, allowing for inequality constraints such as the one contained in
## StationarityConstr ensuring htat the estimated model is covariance (weakly) stationary
if (dist == "Gaussian"){
optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 20.1
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.000001), UB = c(10.0, 0.999, 0.999, 1000))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
Estimate_GARCH <- function(vY,Dates,dist) {
## Function fitting or estimatinig a GARCH(1,1)-model on a certain vector of data
## Input:  vY:      Data-vector
## output: vPar:    parameters resulting in the maximum likeliihood given data c(omega, alpha, beta)
##         dLLK:    Value of the likelihood at the Maximum likelihood given data and estimated parameters
##         BIC:     Average BIC value at the (numerical) maximum likelihood estimate
##         Filter: Vector of conditional volatility
# Initialize the values at some arbitrary values, except omega initialized at the unconditional value.
require(Rsolnp)
dAlpha = 0.05
dBeta  = 0.94
dOmega = var(vY) * (1.0 - dAlpha - dBeta)
vPar = c(dOmega, dAlpha, dBeta)
## Optimize using the non-linear solnp, allowing for inequality constraints such as the one contained in
## StationarityConstr ensuring htat the estimated model is covariance (weakly) stationary
if (dist == "Gaussian"){
optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 20.1
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.0001), UB = c(10.0, 0.999, 0.999, 1000))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
Estimate_GARCH <- function(vY,Dates,dist) {
## Function fitting or estimatinig a GARCH(1,1)-model on a certain vector of data
## Input:  vY:      Data-vector
## output: vPar:    parameters resulting in the maximum likeliihood given data c(omega, alpha, beta)
##         dLLK:    Value of the likelihood at the Maximum likelihood given data and estimated parameters
##         BIC:     Average BIC value at the (numerical) maximum likelihood estimate
##         Filter: Vector of conditional volatility
# Initialize the values at some arbitrary values, except omega initialized at the unconditional value.
require(Rsolnp)
dAlpha = 0.05
dBeta  = 0.94
dOmega = var(vY) * (1.0 - dAlpha - dBeta)
vPar = c(dOmega, dAlpha, dBeta)
## Optimize using the non-linear solnp, allowing for inequality constraints such as the one contained in
## StationarityConstr ensuring htat the estimated model is covariance (weakly) stationary
if (dist == "Gaussian"){
optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 20.1
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.01), UB = c(10.0, 0.999, 0.999, 1000))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
Estimate_GARCH <- function(vY,Dates,dist) {
## Function fitting or estimatinig a GARCH(1,1)-model on a certain vector of data
## Input:  vY:      Data-vector
## output: vPar:    parameters resulting in the maximum likeliihood given data c(omega, alpha, beta)
##         dLLK:    Value of the likelihood at the Maximum likelihood given data and estimated parameters
##         BIC:     Average BIC value at the (numerical) maximum likelihood estimate
##         Filter: Vector of conditional volatility
# Initialize the values at some arbitrary values, except omega initialized at the unconditional value.
require(Rsolnp)
dAlpha = 0.05
dBeta  = 0.94
dOmega = var(vY) * (1.0 - dAlpha - dBeta)
vPar = c(dOmega, dAlpha, dBeta)
## Optimize using the non-linear solnp, allowing for inequality constraints such as the one contained in
## StationarityConstr ensuring htat the estimated model is covariance (weakly) stationary
if (dist == "Gaussian"){
optimizer = solnp(vPar, fun = LLH_GARCH11, vY = vY,
ineqfun = StationarityConstr,
ineqLB  = 0,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001), UB = c(10.0, 0.999, 0.999))
vPar = optimizer$pars
vSigma2 = GARCH11_Filter(vY, vPar[1], vPar[2], vPar[3])$vSigma2
} else if (dist == "Student-t"){
dNu = 20.1
optimizer = solnp(c(vPar, dNu), fun = LLH_GARCH11T, vY = vY,
ineqfun = StationarityConstrT,
ineqLB  = 0.0000001,
ineqUB = 0.99999,
LB = c(0.00001, 0.0001, 0.0001, 2.1), UB = c(10.0, 0.999, 0.999, 1000))
vPar = optimizer$pars
vSigma2 = GARCH11T_Filter(vY, vPar[1], vPar[2], vPar[3], vPar[4])$vSigma2
} else {
stop("Please choose either 'Gaussian' or 'Student-t'")
}
## extract the likelihood computed at its maximum
dLLK = -tail(optimizer$values, 1)
## compute filtered Variance
## Compute the Average BIC
ABIC = (-2 * dLLK + log(length(vY)) * length(vPar))/length(vY)
## return a list with estimated parameters, likelihood value and BIC
lOut = list(vPar = vPar,
dLLK = dLLK,
BIC = ABIC,
Filtered = sqrt(vSigma2),
Observations = vY,
Model = "GARCH",
Dist = dist,
Dates = Dates,
Targetfilter = "Conditional volatility")
class(lOut) <- "FitModel"
return(lOut)
}
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
source('~/OneDrive - Aarhus universitet/R/VolatilityModelling/R/GARCHGauss_Estimate.R')
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
source('~/OneDrive - Aarhus universitet/R/VolatilityModelling/R/GARCHGauss_Estimate.R')
tfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Student-t")
plot(tfit)
gtfit = Estimate_GARCH(yt, index(getSymbols("AAPL", auto.assign = F)), dist = "Gaussian")
plot(gtfit)
source('~/OneDrive - Aarhus universitet/R/VolatilityModelling/R/GARCHGauss_Estimate.R')
paste("twihi", as.character(2), "haha")
shiny::runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
devtools::install_github("RasmusJensen96/VolatilityModelling")
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
foo = "emkt"
foo == c("emkt", "emktcum")
anny(foo) == c("emkt", "emktcum")
any(foo) == c("emkt", "emktcum")
any(foo == c("emkt", "emktcum"))
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
any(foo == c("emkt", "emktcum"))
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
runApp('~/OneDrive - Aarhus universitet/R/FinancialMoodel/Financial')
finspot <- function(a, p){
impact <- a[p]
while(p>1 || p<length(a)){
firstmove <- max(a[p-1], a[p+1])
if (firstmove > impact){
return(p)
}else{
p = firstmove
}
}
return(p)
}
rand
rand()
randu()
randu(1)
randu
y = integer(randu*10)
y = integer(randu[,1]*10)
y = randu[,1]*10
y
y = as.interger(randu[,1]*10)
y = as.integer(randu[,1]*10)
y
finspot <- function(a, p){
impact <- a[p]
while(p>1 || p<length(a)){
firstmove <- max(a[p-1], a[p+1])
if (firstmove >= impact){
if (firstmove == impact){
return(firstmove, p)
}else{
return(p)}
}else{
p = firstmove
}
}
return(p)
}
finspot(y, 10)
finspot(y, 15)
finspot(y, 19)
finspot <- function(a, p){
impact <- a[p]
while(p>1 || p<length(a)){
firstmove <- min(a[p-1], a[p+1])
if (firstmove >= impact){
if (firstmove == impact){
return(firstmove, p)
}else{
return(p)}
}else{
p = firstmove
}
}
return(p)
}
finspot(y, 19)
finspot(y, 12)
finspot(y, 1)
finspot <- function(a, p){
impact <- a[p]
while(p>1 || p<length(a)){
firstmove <- min(a[p-1], a[p+1])
if (firstmove >= impact){
if (firstmove == impact){
return(c(firstmove, p))
}else{
return(p)}
}else{
p = firstmove
}
}
return(p)
}
finspot(y, 1)
finspot(y, 10)
